import { NextRequest, NextResponse } from "next/server";

interface EvaluationRequest {
  word: string;
  meaning: string;
  userInput: string;
  source: "oxford" | "topics";
  topic?: string;
}

interface EvaluationResponse {
  passed: boolean;
  feedback: string;
  confidence: number;
}

export async function POST(request: NextRequest) {
  try {
    const { word, meaning, userInput, source, topic }: EvaluationRequest =
      await request.json();

    console.log("=== AI EVALUATION REQUEST ===");
    console.log("Word:", word);
    console.log("Meaning:", meaning);
    console.log("User Input:", userInput);
    console.log("Source:", source);

    // Call Gemini API for intelligent evaluation
    const geminiResponse = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": "AIzaSyDBjGo2VNcCax-h_WHZZ2vuT85YWA0whVQ",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp. H√£y ƒë√°nh gi√° c√¢u ti·∫øng Anh c·ªßa h·ªçc sinh v·ªõi c√°c ti√™u ch√≠:

**T·ª´ v·ª±ng h·ªçc:** "${word}" (nghƒ©a: ${meaning})
**C√¢u c·ªßa h·ªçc sinh:** "${userInput}"

**Y√™u c·∫ßu ƒë√°nh gi√°:**

1. **KI·ªÇM TRA C∆† B·∫¢N:**
   - C√≥ s·ª≠ d·ª•ng t·ª´ "${word}" kh√¥ng?
   - C√¢u c√≥ √Ω nghƒ©a r√µ r√†ng kh√¥ng?
   - Ng·ªØ ph√°p c√≥ ƒë√∫ng kh√¥ng? (ƒë·∫∑c bi·ªát ch√∫ √Ω subject-verb agreement)

2. **TI√äU CH√ç ƒê·∫†T/CH∆ØA ƒê·∫†T:**
   - ƒê·∫†T: D√πng ƒë√∫ng t·ª´ + ng·ªØ ph√°p c∆° b·∫£n ƒë√∫ng + c√≥ √Ω nghƒ©a
   - CH∆ØA ƒê·∫†T: Kh√¥ng d√πng t·ª´ ho·∫∑c sai ng·ªØ ph√°p nghi√™m tr·ªçng ho·∫∑c kh√¥ng c√≥ √Ω nghƒ©a

3. **L∆ØU √ù QUAN TR·ªåNG:**
   - KH√îNG tr·ª´ ƒëi·ªÉm v√¨ thi·∫øu vi·∫øt hoa ƒë·∫ßu c√¢u
   - KH√îNG tr·ª´ ƒëi·ªÉm v√¨ thi·∫øu d·∫•u ch·∫•m cu·ªëi c√¢u
   - CH·ªà t·∫≠p trung v√†o: d√πng t·ª´ ƒë√∫ng nghƒ©a + ng·ªØ ph√°p c∆° b·∫£n + √Ω nghƒ©a c√¢u

**Tr·∫£ l·ªùi th·∫≥ng b·∫±ng text thu·∫ßn, KH√îNG d√πng JSON:**

ƒê√°nh gi√° ng·∫Øn g·ªçn theo format (KH√îNG d√πng ** markdown):
üìö T·ª´ v·ª±ng: [n·∫øu kh√¥ng d√πng t·ª´ "${word}" th√¨ ghi "Kh√¥ng s·ª≠ d·ª•ng t·ª´ v·ª±ng y√™u c·∫ßu", n·∫øu c√≥ th√¨ ƒë√°nh gi√°]
üî§ Ng·ªØ ph√°p: [ƒë√°nh gi√° ng·ªØ ph√°p, ch·ªâ ra l·ªói c·ª• th·ªÉ n·∫øu c√≥] 
‚ú® Ch·∫•t l∆∞·ª£ng: [ƒë√°nh gi√° t·ªïng th·ªÉ v·ªÅ c√¢u]
üí° K·∫øt lu·∫≠n: [ƒê·∫†T/CH∆ØA ƒê·∫†T + g·ª£i √Ω ng·∫Øn g·ªçn]

Tr·∫£ l·ªùi tr·ª±c ti·∫øp, kh√¥ng bao b·ªçc trong JSON, markdown hay code block.`,
                },
              ],
            },
          ],
        }),
      }
    );

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error("Gemini API Error:", errorText);

      // Handle quota exceeded or API key issues
      if (geminiResponse.status === 429) {
        // Quota exceeded - return a simple evaluation
        console.log("Gemini quota exceeded, using fallback evaluation");
        const hasWord = userInput.toLowerCase().includes(word.toLowerCase());
        const evaluation: EvaluationResponse = {
          passed: hasWord && userInput.trim().length > 3,
          feedback: hasWord
            ? `‚úÖ T·ªët! B·∫°n ƒë√£ s·ª≠ d·ª•ng t·ª´ "${word}" trong c√¢u. (AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng)`
            : `‚ùå B·∫°n ch∆∞a s·ª≠ d·ª•ng t·ª´ "${word}" trong c√¢u. H√£y th·ª≠ vi·∫øt l·∫°i c√¢u c√≥ ch·ª©a t·ª´ n√†y.`,
          confidence: 0.5,
        };

        return NextResponse.json({
          success: true,
          evaluation: evaluation,
          source: "fallback-simple",
        });
      }

      throw new Error(`Gemini API failed: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    console.log("Raw Gemini Response:", JSON.stringify(geminiData, null, 2));

    if (
      !geminiData.candidates ||
      !geminiData.candidates[0]?.content?.parts?.[0]?.text
    ) {
      throw new Error("Invalid Gemini response structure");
    }

    const geminiText = geminiData.candidates[0].content.parts[0].text;
    console.log("Gemini Text Response:", geminiText);

    // Process the response to extract feedback and determine if passed
    const cleanedText = geminiText.trim();

    // Determine if passed by checking for "ƒê·∫†T" vs "CH∆ØA ƒê·∫†T"
    const passed =
      cleanedText.includes("K·∫øt lu·∫≠n: ƒê·∫†T") ||
      (cleanedText.includes("ƒê·∫†T") && !cleanedText.includes("CH∆ØA ƒê·∫†T"));

    const evaluation: EvaluationResponse = {
      passed: passed,
      feedback: cleanedText, // Just use the clean text directly
      confidence: passed ? 0.85 : 0.75,
    };

    console.log("=== FINAL EVALUATION ===");
    console.log("Passed:", evaluation.passed);
    console.log("Confidence:", evaluation.confidence);
    console.log("Feedback:", evaluation.feedback);

    return NextResponse.json({
      success: true,
      evaluation: evaluation,
      source: "gemini-ai",
    });
  } catch (error) {
    console.error("AI Evaluation API Error:", error);
    return NextResponse.json(
      {
        success: false,
        error: "C√≥ l·ªói x·∫£y ra khi ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i!",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
